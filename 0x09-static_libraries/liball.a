!<arch>
0-isupper.c/    0           0     0     644     248       `
#include "main.h"

/**
 * _isupper - entry point
 * @c: character
 *
 * Description: checks for uppercase character
 * Return: 1 if c is uppercase 0 otherwise
 */
int _isupper(int c)
{
	if (c >= 'A' && c <= 'Z')
		return (1);
	else
		return (0);
}
0-memset.c/     0           0     0     644     328       `
#include "main.h"

/**
 * *_memset - fills memory with a constant byte
 * @s: memory area to be filled
 * @b: char to copy
 * @n: number of times to copy b
 *
 * Return: pointer to the memory area s
 */
char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		s[i] = b;
	}
	return (s);
}
0-strcat.c/     0           0     0     644     411       `
#include "main.h"

/**
 * _strcat - function that concatenates two strings
 * @src: source string
 * @dest: destination string
 * Return: pointer to the resulting string dest
 */
char *_strcat(char *dest, char *src)
{
	int i;
	int j;

	for (i = 0; dest[i] != '\0'; i++)
	{
		if (dest[i + 1] == '\0')
		{
			for (j = 0; src[j] != '\0'; j++)
			{
				dest[i + 1] = src[j];
				i++;
			}
		}
	}

	return (dest);
}

100-atoi.c/     0           0     0     644     328       `
#include "main.h"

/**
 * _atoi - check the code
 * @s: variable
 * Return: void.
 */
int _atoi(char *s)
{
	int sign = 1;
	unsigned int num = 0;

	do {

		if (*s == '-')
			sign *= -1;

		else if (*s >= '0' && *s <= '9')
			num = (num * 10) + (*s - '0');

		else if (num > 0)
			break;
	} while (*s++);

	return (num * sign);
}
1-isdigit.c/    0           0     0     644     233       `
#include "main.h"

/**
 *  _isdigit - checks for a digit (0 through 9).
 * @c:  integer
 * Return: 1 if @c is a digit, 0 otherwise
 */

int _isdigit(int c)
{
	if (c >= '0' && c <= '9')
	{
		return (1);
	}
	else
	{
		return (0);
	}
}

1-memcpy.c/     0           0     0     644     332       `
#include "main.h"

/**
 * *_memcpy - copies memory area
 * @dest: destination memory area
 * @src: memory area to copy area
 * @n: number of bytes to copy
 *
 * Return: pointer to dest
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		dest[i] = src[i];
	}

	return (dest);
}
1-strncat.c/    0           0     0     644     453       `
#include "main.h"

/**
 * _strncat - function that concatenates two strings
 * @src: source string
 * @dest: destination string
 * @n: destination string
 * Return: pointer to the resulting string dest
 */
char *_strncat(char *dest, char *src, int n)
{
	int i;
	int j;

	for (i = 0; dest[i] != '\0'; i++)
	{
		if (dest[i + 1] == '\0')
		{
			for (j = 0; src[j] != '\0' && j < n; j++)
			{
			dest[i + 1] = src[j];
			i++;
			}
		}
	}

	return (dest);
}

2-strchr.c/     0           0     0     644     414       `
#include "main.h"
#include "stdio.h"

/**
 * *_strchr - locates a character in a string
 * @s: string to search
 * @c: char to find
 *
 * Return: a pointer to the first occurence of the character c
 * in the string s, or NULL if the character is not found
 */
char *_strchr(char *s, char c)
{
	int a;

	while (1)
	{
		a = *s++;
		if (a == c)
		{
			return (s - 1);
		}
		if (a == 0)
		{
			return (NULL);
		}
	}
}
2-strlen.c/     0           0     0     644     177       `
#include "main.h"

/**
 * _strlen - check the code
 * @s: variable
 * Return: void.
 */
int _strlen(char *s)
{
	int i;

	for (i = 0; *(s + i) != '\0'; i++)
	{
	}
	return (i);
}

2-strncpy.c/    0           0     0     644     444       `
#include "main.h"
#include <string.h>
/**
 * _strncpy  -   copies the string pointed to by src,
 * including the terminating null byte ('\0')
 * @dest: pointer of char
 * @src: pointer of char
 * @n: number of bytes
 * Return: Returns a a copy  of @src in  @dest
 */

char *_strncpy(char *dest, char *src, int n)
{
	int i;

	for (i = 0; i < n && src[i] != '\0'; i++)
		dest[i] = src[i];
	for ( ; i < n; i++)
		dest[i] = '\0';
	return (dest);
}
3-islower.c/    0           0     0     644     263       `
#include"main.h"
/**
 * int _islower(int c) - function that checks for lowercase character.
 * @c: The character to be checked
 *
 * Return: 1 if c is lowercase, 0 otherwise
 */
int _islower(int c)
{
	if (c >= 'a' && c <= 'z')
		return (1);
	else
		return (0);
}

3-puts.c/       0           0     0     644     208       `
#include "main.h"

/**
 * _puts - check the code
 * @str: variable
 * Return: void.
 */
void _puts(char *str)
{
	int i;

	for (i = 0; *(str + i) != '\0'; i++)
	{
		_putchar(*(str + i));
	}
	_putchar('\n');
}
3-strcmp.c/     0           0     0     644     322       `
#include "main.h"

/**
 * _strcmp - compares two strings.
 * @s1: source string
 * @s2: destination string
 * Return: pointer to the resulting string dest
 */
int _strcmp(char *s1, char *s2)
{
	int i;

	for (i = 0; s1[i] != '\0' && s2[i] != '\0'; i++)
	{
		if (s1[i] != s2[i])
			return (s1[i] - s2[i]);
	}
	return (0);
}
3-strspn.c/     0           0     0     644     577       `
#include "main.h"

/**
 * *_strspn - gets the length of a prefix substring
 * @s: string to evaluate
 * @accept: string containing the list of characters to match in s
 *
 * Return: the number of bytes in the initial segment
 * of s which consist only bytes from accept
 */
unsigned int _strspn(char *s, char *accept)
{
	int i, j, f, flag;

	f = 0;
		for (i = 0; s[i] != '\0'; i++)
		{
			flag = 0;
			for (j = 0; accept[j] != '\0'; j++)
			{
				if (s[i] == accept[j])
				{
					f++;
					flag = 1;
				}
			}
			if (flag == 0)
			{
				return (f);
			}
		}

		return (0);
}

4-isalpha.c/    0           0     0     644     316       `
#include"main.h"
/**
 * _isalpha - function that checks ifa charachter is alphabetic character.
 * @c: the character to be checked
 *
 * Return: 1 if c is a letter lowercase or uppercase, 0 otherwise
 */
int _isalpha(int c)
{
	if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'z'))
	{
		return (1);
	}
	return (0);
}
4-strpbrk.c/    0           0     0     644     506       `
#include "main.h"
#include <stdio.h>

/**
 * *_strpbrk - searches a string for any of a set of bytes
 * @s: string to search
 * @accept: string containing the bytes to look for
 *
 * Return: pointer to the byte in s that matches one of the bytes
 * in accept or NULL if no such byte is found
 */
char *_strpbrk(char *s, char *accept)
{
	int i, j;

	for (i = 0; *s != '\0'; i++)
	{
		for (j = 0; accept[j] != '\0'; j++)
		{
			if (*s == accept[j])
			{
				return (s);
			}
		}
		s++;
	}

	return (NULL);
}
5-strstr.c/     0           0     0     644     511       `
#include "main.h"
#include <stdio.h>

/**
 * *_strstr - locates a substring
 * @haystack: string to reach in
 * @needle: substring to look for
 *
 * Return: pointer to the beginning of the located substring or
 * NULL if the substring is not found
 */
char *_strstr(char *haystack, char *needle)
{
	int i, j;

	for (i = 0; haystack[i] != '\0'; i++)
	{
		for (j = 0; needle[j] != '\0'; j++)
		{
			if (haystack[i + j] != needle[j])
				break;
		}
		if (!needle[j])
			return (&haystack[i]);
	}
	return (NULL);
}

6-abs.c/        0           0     0     644     234       `
#include "main.h"
/**
 *  _abs - Write a function that computes
 * the absolute value of an integer.
 * @n : integr
 * Return: the absolute value of an integer.
 */
int _abs(int n)
{
if (n < 0)
{
return (-1 * n);
}
else
return (n);
}
9-strcpy.c/     0           0     0     644     259       `
#include "main.h"

/**
 * _strcpy - check the code
 * @dest: pointer
 * @src: pointer
 * Return: void.
 */
char *_strcpy(char *dest, char *src)
{
	int i;

	for (i = 0; src[i] != '\0'; i++)
	{
		*(dest + i) = *(src + i);
	}
	dest[i] = '\0';
	return (dest);
}


main.c/         0           0     0     644     148       `
#include "main.h"

int main(void)
{
    _puts("\"At the end of the day, my goal was to be the best hacker\"\n\t- Kevin Mitnick");
    return (0);
}
_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

